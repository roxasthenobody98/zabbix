---
test case: Expression '1 + 2 * 3'
in:
  rules: []
  expression: '1 + 2 * 3'
out:
  result: SUCCEED
  value: 7
---
test case: Expression '1'
in:
  rules: []
  expression: '1'
out:
  result: SUCCEED
  value: 1
---
test case: Expression '"x\"y\"z"'
in:
  rules: []
  expression: '"x\"y\"z"'
out:
  result: SUCCEED
  value: 'x"y"z'
---
test case: Expression '{$M}'
in:
  rules: [ZBX_EVAL_PARSE_USERMACRO]
  expression: '{$M}'
  replace: 
  - {token: '{$M}', value: '2'}
out:
  result: SUCCEED
  value: 2
---
test case: Expression '{$M}'
in:
  rules: []
  expression: '{$M}'
  replace: 
  - {token: '{$M}', value: '2'}
out:
  result: FAIL
---
test case: Expression '{M}'
in:
  rules: [ZBX_EVAL_PARSE_MACRO]
  expression: '{M}'
  replace: 
  - {token: '{M}', value: '3'}
out:
  result: SUCCEED
  value: 3
---
test case: Expression '{M}'
in:
  rules: []
  expression: '{M}'
  replace: 
  - {token: '{M}', value: '2'}
out:
  result: FAIL
---
test case: Expression '{123}'
in:
  rules: [ZBX_EVAL_PARSE_FUNCTIONID]
  expression: '{123}'
  replace: 
  - {token: '{123}', value: '4'}
out:
  result: SUCCEED
  value: 4
---
test case: Expression '{123}'
in:
  rules: [ZBX_EVAL_PARSE_FUNCTIONID]
  expression: '{123}'
out:
  result: FAIL
---
test case: Expression '{123}'
in:
  rules: [ZBX_EVAL_PARSE_FUNCTIONID]
  expression: '{123}'
  replace: 
  - {token: '{123', value: '4'}
out:
  result: FAIL
---
test case: Expression '-1'
in:
  rules: []
  expression: '-1'
out:
  result: SUCCEED
  value: '-1'
---
test case: Expression '- "2"'
in:
  rules: []
  expression: '- "2"'
out:
  result: SUCCEED
  value: '-2'
---
test case: Expression '1+2'
in:
  rules: []
  expression: '1+2'
out:
  result: SUCCEED
  value: '3'
---
test case: Expression '1-2'
in:
  rules: []
  expression: '1-2'
out:
  result: SUCCEED
  value: '-1'
---
test case: Expression '3*2'
in:
  rules: []
  expression: '3*2'
out:
  result: SUCCEED
  value: '6'
---
test case: Expression '1/2'
in:
  rules: []
  expression: '1/2'
out:
  result: SUCCEED
  value: '0.5'
---
test case: Expression '1=1'
in:
  rules: []
  expression: '1=1'
out:
  result: SUCCEED
  value: '1'
---
test case: Expression '1=2'
in:
  rules: []
  expression: '1=2'
out:
  result: SUCCEED
  value: '0'
---
test case: Expression '"xyz"="xyz"'
in:
  rules: []
  expression: '"xyz"="xyz"'
out:
  result: SUCCEED
  value: '1'
---
test case: Expression '"xyz"="abc"'
in:
  rules: []
  expression: '"xyz"="abc"'
out:
  result: SUCCEED
  value: '0'
---
test case: Expression '1<>1'
in:
  rules: []
  expression: '1<>1'
out:
  result: SUCCEED
  value: '0'
---
test case: Expression '1<>2'
in:
  rules: []
  expression: '1<>2'
out:
  result: SUCCEED
  value: '1'
---
test case: Expression '"xyz"<>"xyz"'
in:
  rules: []
  expression: '"xyz"<>"xyz"'
out:
  result: SUCCEED
  value: '0'
---
test case: Expression '"xyz"<>"abc"'
in:
  rules: []
  expression: '"xyz"<>"abc"'
out:
  result: SUCCEED
  value: '1'
---
test case: Expression '1<2'
in:
  rules: []
  expression: '1<2'
out:
  result: SUCCEED
  value: '1'
---
test case: Expression '1<1'
in:
  rules: []
  expression: '1<1'
out:
  result: SUCCEED
  value: '0'
---
test case: Expression '2>2'
in:
  rules: []
  expression: '2>2'
out:
  result: SUCCEED
  value: '0'
---
test case: Expression '2>1'
in:
  rules: []
  expression: '2>1'
out:
  result: SUCCEED
  value: '1'
---
test case: Expression '1<=2'
in:
  rules: []
  expression: '1<=2'
out:
  result: SUCCEED
  value: '1'
---
test case: Expression '2<=2'
in:
  rules: []
  expression: '2<=2'
out:
  result: SUCCEED
  value: '1'
---
test case: Expression '1<=3'
in:
  rules: []
  expression: '3<=2'
out:
  result: SUCCEED
  value: '0'
---
test case: Expression '2>=1'
in:
  rules: []
  expression: '2>=1'
out:
  result: SUCCEED
  value: '1'
---
test case: Expression '2>=2'
in:
  rules: []
  expression: '2>=2'
out:
  result: SUCCEED
  value: '1'
---
test case: Expression '2>=3'
in:
  rules: []
  expression: '2>=3'
out:
  result: SUCCEED
  value: '0'
---
test case: Expression '0 or 0'
in:
  rules: []
  expression: '0 or 0'
out:
  result: SUCCEED
  value: '0'
---
test case: Expression '0 or 1'
in:
  rules: []
  expression: '0 or 1'
out:
  result: SUCCEED
  value: '1'
---
test case: Expression '1 or 0'
in:
  rules: []
  expression: '1 or 0'
out:
  result: SUCCEED
  value: '1'
---
test case: Expression '1 or 1'
in:
  rules: []
  expression: '1 or 1'
out:
  result: SUCCEED
  value: '1'
---
test case: Expression '0 and 0'
in:
  rules: []
  expression: '0 and 0'
out:
  result: SUCCEED
  value: '0'
---
test case: Expression '0 and 1'
in:
  rules: []
  expression: '0 and 1'
out:
  result: SUCCEED
  value: '0'
---
test case: Expression '1 and 0'
in:
  rules: []
  expression: '1 and 0'
out:
  result: SUCCEED
  value: '0'
---
test case: Expression '1 and 1'
in:
  rules: []
  expression: '1 and 1'
out:
  result: SUCCEED
  value: '1'
---
test case: Expression 'not 1'
in:
  rules: []
  expression: 'not 1'
out:
  result: SUCCEED
  value: '0'
---
test case: Expression 'not not 1'
in:
  rules: []
  expression: 'not not 1'
out:
  result: SUCCEED
  value: '1'
---
test case: Expression 'min(2, 1)'
in:
  rules: [ZBX_EVAL_PARSE_FUNCTION]
  expression: 'min(2, 1)'
out:
  result: SUCCEED
  value: '1'
---
test case: Expression 'min(2, 3)'
in:
  rules: [ZBX_EVAL_PARSE_FUNCTION]
  expression: 'min(2, 3)'
out:
  result: SUCCEED
  value: '2'
---
test case: Expression 'max(2, 1)'
in:
  rules: [ZBX_EVAL_PARSE_FUNCTION]
  expression: 'max(2, 1)'
out:
  result: SUCCEED
  value: '2'
---
test case: Expression 'max(2, 3)'
in:
  rules: [ZBX_EVAL_PARSE_FUNCTION]
  expression: 'max(2, 3)'
out:
  result: SUCCEED
  value: '3'
---
test case: Expression 'sum(1, 2, 3)'
in:
  rules: [ZBX_EVAL_PARSE_FUNCTION]
  expression: 'sum(1, 2, 3)'
out:
  result: SUCCEED
  value: '6'
---
test case: Expression 'avg(1, 2, 9)'
in:
  rules: [ZBX_EVAL_PARSE_FUNCTION]
  expression: 'avg(1, 2, 9)'
out:
  result: SUCCEED
  value: '4'
---
test case: Expression 'min(max(1, 3), max(2, 4))'
in:
  rules: [ZBX_EVAL_PARSE_FUNCTION]
  expression: 'min(max(1, 3), max(2, 4))'
out:
  result: SUCCEED
  value: '3'
---
test case: Expression 'max("2", "1")'
in:
  rules: [ZBX_EVAL_PARSE_FUNCTION]
  expression: 'max("2", "1")'
out:
  result: SUCCEED
  value: '2'
---
test case: Expression 'max("2", "a")'
in:
  rules: [ZBX_EVAL_PARSE_FUNCTION]
  expression: 'max("2", "a")'
out:
  result: FAIL
---
test case: Expression '{$M} or 1'
in:
  rules: [ZBX_EVAL_PARSE_USERMACRO]
  expression: '{$M} or 1'
  replace: 
  - {token: '{$M}', error: 'forced operand error'}
out:
  result: FAIL
---
test case: Expression '{$M} or 0'
in:
  rules: [ZBX_EVAL_PARSE_USERMACRO]
  expression: '{$M} or 0'
  replace: 
  - {token: '{$M}', error: 'forced operand error'}
out:
  result: FAIL
---
test case: Expression '{$M} or 1'
in:
  rules: [ZBX_EVAL_PARSE_USERMACRO,ZBX_EVAL_PROCESS_ERROR]
  expression: '{$M} or 1'
  replace: 
  - {token: '{$M}', error: 'forced operand error'}
out:
  result: SUCCEED
  value: 1
---
test case: Expression '{$M} or 0'
in:
  rules: [ZBX_EVAL_PARSE_USERMACRO,ZBX_EVAL_PROCESS_ERROR]
  expression: '{$M} or 0'
  replace: 
  - {token: '{$M}', error: 'forced operand error'}
out:
  result: FAIL
---
test case: Expression '{$M} and 1'
in:
  rules: [ZBX_EVAL_PARSE_USERMACRO]
  expression: '{$M} and 1'
  replace: 
  - {token: '{$M}', error: 'forced operand error'}
out:
  result: FAIL
---
test case: Expression '{$M} and 0'
in:
  rules: [ZBX_EVAL_PARSE_USERMACRO]
  expression: '{$M} and 0'
  replace: 
  - {token: '{$M}', error: 'forced operand error'}
out:
  result: FAIL
---
test case: Expression '{$M} and 1'
in:
  rules: [ZBX_EVAL_PARSE_USERMACRO,ZBX_EVAL_PROCESS_ERROR]
  expression: '{$M} and 1'
  replace: 
  - {token: '{$M}', error: 'forced operand error'}
out:
  result: FAIL
---
test case: Expression '{$M} and 0'
in:
  rules: [ZBX_EVAL_PARSE_USERMACRO,ZBX_EVAL_PROCESS_ERROR]
  expression: '{$M} and 0'
  replace: 
  - {token: '{$M}', error: 'forced operand error'}
out:
  result: SUCCEED
  value: 0
---
test case: Expression '{$M} + 2 or 1'
in:
  rules: [ZBX_EVAL_PARSE_USERMACRO,ZBX_EVAL_PROCESS_ERROR]
  expression: '{$M} + 2 or 1'
  replace: 
  - {token: '{$M}', error: 'forced operand error'}
out:
  result: SUCCEED
  value: 1
---
test case: Expression '{$M} + 2 and 0'
in:
  rules: [ZBX_EVAL_PARSE_USERMACRO,ZBX_EVAL_PROCESS_ERROR]
  expression: '{$M} + 2 and 0'
  replace: 
  - {token: '{$M}', error: 'forced operand error'}
out:
  result: SUCCEED
  value: 0
---
test case: Expression 'strlen("")'
in:
  rules: [ZBX_EVAL_PARSE_FUNCTION]
  expression: 'strlen("")'
out:
  result: SUCCEED
  value: '0'
---
test case: Expression 'strlen("abc")'
in:
  rules: [ZBX_EVAL_PARSE_FUNCTION]
  expression: 'strlen("abc")'
out:
  result: SUCCEED
  value: '3'
---
test case: Expression 'strlen(4)'
in:
  rules: [ZBX_EVAL_PARSE_FUNCTION]
  expression: 'strlen(4)'
out:
  result: SUCCEED
  value: '1'
---
test case: Expression 'strlen()'
in:
  rules: [ZBX_EVAL_PARSE_FUNCTION]
  expression: 'strlen()'
out:
  result: FAIL
---
test case: Expression 'strlen(1, 2)'
in:
  rules: [ZBX_EVAL_PARSE_FUNCTION]
  expression: 'strlen(1, 2)'
out:
  result: FAIL
...

